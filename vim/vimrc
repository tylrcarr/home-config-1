set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
" (Don't forget you may need to make these submodules if under git)
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-ragtag'
Plugin 'tpope/vim-surround'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'altercation/vim-colors-solarized'
Bundle 'digitaltoad/vim-jade'
Bundle 'wavded/vim-stylus'
Plugin 'pangloss/vim-javascript'
Plugin 'fatih/vim-go'
Plugin 'othree/html5.vim'
Plugin 'elzr/vim-json'
Plugin 'junegunn/goyo.vim'
Plugin 'cespare/vim-toml'
Plugin 'tfnico/vim-gradle'
Plugin 'keith/swift.vim'
Plugin 'mustache/vim-mustache-handlebars'


call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

let g:goyo_width=71
let g:goyo_height=22
let  g:goyo_linenr=0

function! s:goyo_enter()
  let b:quitting = 0
  let b:quitting_bang = 0
  autocmd QuitPre <buffer> let b:quitting = 1
  cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
endfunction

function! s:goyo_leave()
  " Quit Vim if this is the only remaining buffer
  if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
    if b:quitting_bang
      qa!
    else
      qa
    endif
  endif
endfunction

autocmd User GoyoEnter call <SID>goyo_enter()
autocmd User GoyoLeave call <SID>goyo_leave()

let g:vim_json_syntax_conceal=0

syntax on
filetype plugin on
set nocompatible
set modelines=0
set spelllang=en_us
set autoread
set expandtab
set tabstop=2
set shiftwidth=2
set shiftround
set softtabstop=2
set number
"set rnu
set encoding=utf-8
set scrolloff=3
set autoindent
set nosmartindent
set nocindent
set autochdir
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set hlsearch
set ignorecase
set smartcase
set incsearch
set showmatch
set matchtime=3
set wrap
set textwidth=80
set formatoptions=qrn1
set nobackup
set noswapfile
set nowritebackup

let loaded_matchparen=0

" Keep in mind that if you have already solarized your gnome-terminal
" you really don't need any of this

set background=dark
let g:solarized_visibility="high"
let g:solarized_contrast="high"
let g:solarized_termcolors=16
let g:solarized_termtrans=1
colorscheme solarized
"colorscheme desert

"set cursorline
highlight  CursorLine cterm=NONE ctermbg=darkgrey ctermfg=None
autocmd InsertEnter * highlight  CursorLine ctermbg=None ctermfg=None
autocmd InsertLeave * highlight  CursorLine ctermbg=darkgrey ctermfg=None


"set cursorcolumn
"highlight  CursorColumn cterm=NONE ctermbg=darkgrey ctermfg=None

" Fixes 'can't find specified path' errors (both work)
" set shell=/bin/bash\ -i
" set shell=bash
set shellcmdflag=-ic

" Reformat paragraphs wrapped to [default][]
nnoremap fmt !}fmt<CR>
nnoremap ucmt !}ucmt<CR>
nnoremap cmt !}cmt<CR>
nnoremap chomp !}chomp<CR>
nnoremap cfmt !}cfmt<CR>
"nnoremap bq !}bq<CR>
nnoremap mm Bi[<ESC>Ea]()<ESC>i

" Jump to last position in a given file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Remember global variables
if !empty(&viminfo)
  set viminfo^=!
endif

" i feel so dirty using this, learn cnt-[ if you haven't already
inoremap kj <Esc>

" FKEY mappings
map <F1> :set number!<CR>
map <F2> :set relativenumber!<CR>
set pastetoggle=<F3>
map <F4> :set list!<CR>
map <F5> :set cursorline!<CR>
map <F7> :set spell!<CR>

" :Now command, (needs a now script/cmd of some kind)
function! GetNow()
  let result = substitute(system('now'), '[\]\|[[:cntrl:]]', '', 'g')
  call setline(line('.'), getline('.') . result)
endfunction
command Now :call GetNow()<CR>

" :Now command, (needs a now script/cmd of some kind)
function! GetSKID()
  let result = substitute(system('skid'), '[\]\|[[:cntrl:]]', '', 'g')
  call setline(line('.'), getline('.') . result)
endfunction
command Skid :call GetSKID()<CR>

" modula what?
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead LINKS set filetype=markdown

let g:markdownfmt_command = 'markdownfmt'
let g:markdownfmt_autosave=1

" json almost  == javascript
autocmd BufNewFile,BufRead *.json set ft=json
autocmd BufNewFile,BufRead META set ft=markdown
autocmd BufNewFile,BufRead *.esml set ft=toml
autocmd BufNewFile,BufRead *.esdl set ft=toml

" crontab
autocmd BufNewFile,BufRead *.crontab set ft=crontab

let g:goyo_height="100%"
let g:goyo_width=80
let g:goyo_liner=71

if has("autocmd")
  au FileType markdown,txt,html,jade set spell
  "au FileType markdown,txt Goyo 70
  au FileType yaml,javascript,html,json,jade,stylus setl tabstop=2 shiftwidth=2 softtabstop=2
  au FileType go setl tabstop=8 shiftwidth=8 softtabstop=8
  au FileType java,python setl tabstop=4 shiftwidth=4 softtabstop=4
endif

hi SpellBad ctermfg=015 ctermbg=003 cterm=none guifg=#FFFFFF guibg=#FF0000 gui=none

" Call out missing markdown reference links
function! MyHighlights()
  syn match markdownError '^\[.*\]:[ \t]*$'
endfunction
autocmd Syntax * call MyHighlights()

" Add GameMaker XML project files
au BufNewFile,BufRead *.gmx set filetype=xml

" Add Stylus (CSS Preprocessor in Node)
au BufNewFile,BufRead *.stylus set filetype=css

" Fix broken ssh config detection when no dot
au BufNewFile,BufRead *ssh/config set filetype=sshconfig

" Fix broken git config detection when no dot
au BufNewFile,BufRead *gitconfig set filetype=gitconfig

function! DetectNode()
  if getline(1) =~ '^#.*\<node\>'
    set filetype=javascript
  endif
endfunction
au BufNewFile,BufRead * call DetectNode()

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" remember the last position in a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

try
  :source ~/repos/private/vimrc
catch
  " no private vimrc, that's ok
endtry

noremap <up> :echoerr "Umm, use k instead"<CR>
noremap <down> :echoerr "Umm, use j instead"<CR>
noremap <left> :echoerr "Umm, use h instead"<CR>
noremap <right> :echoerr "Umm, use l instead"<CR>
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>

highlight EndOfBuffer ctermfg=black ctermbg=black
highlight StatusLine cterm=None term=None

autocmd FileType markdown |
      \hi def link markdownItalic              NONE |
      \hi def link markdownItalicDelimiter     NONE |
      \hi def link markdownBold                NONE |
      \hi def link markdownBoldDelimiter       NONE |
      \hi def link markdownBoldItalic          NONE |
      \hi def link markdownBoldItalicDelimiter NONE
